<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>样例2：保存豆瓣社区前x页的html页面</title>
      <link href="/2024/10/28/%E4%BF%9D%E5%AD%98%E8%B1%86%E7%93%A3%E7%A4%BE%E5%8C%BA%E5%89%8D%E4%B8%89%E9%A1%B5%E7%9A%84html%E9%A1%B5%E9%9D%A2/"/>
      <url>/2024/10/28/%E4%BF%9D%E5%AD%98%E8%B1%86%E7%93%A3%E7%A4%BE%E5%8C%BA%E5%89%8D%E4%B8%89%E9%A1%B5%E7%9A%84html%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url_template = <span class="string">&quot;https://www.douban.com/tag/%E7%A4%BE%E5%8C%BA/article?start=&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储HTML内容的列表</span></span><br><span class="line">html_contents = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取前三页内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">45</span>, <span class="number">15</span>):  <span class="comment"># 每页显示15条，start参数每次增加15</span></span><br><span class="line">    response = requests.get(url_template.<span class="built_in">format</span>(i), headers=headers)</span><br><span class="line">    response.raise_for_status()  <span class="comment"># 如果请求出错，抛出HTTPError异常</span></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    articles = soup.select(<span class="string">&#x27;.article .item&#x27;</span>)</span><br><span class="line">    html_contents.append(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存储HTML文件的目录（如果不存在）</span></span><br><span class="line">output_dir = <span class="string">&#x27;douban_community_articles&#x27;</span></span><br><span class="line">os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存前三页的HTML内容到文件中</span></span><br><span class="line"><span class="keyword">for</span> i, html <span class="keyword">in</span> <span class="built_in">enumerate</span>(html_contents):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(output_dir, <span class="string">f&#x27;page_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.html&#x27;</span>), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;豆瓣社区图文前三页已保存至 <span class="subst">&#123;output_dir&#125;</span> 目录下。&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 爬取网址</span></span><br><span class="line"><span class="comment"># http://bbs.itheima.com/forum-425-1.html</span></span><br><span class="line"><span class="comment"># http://bbs.itheima.com/forum-425-2.html</span></span><br><span class="line"><span class="comment"># http://bbs.itheima.com/forum-425-3.html</span></span><br><span class="line"><span class="comment">#https://book.douban.com/latest?subcat=%E5%85%A8%E9%83%A8&amp;p=0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    作用:根据url发送请求，获取服务器响应文件</span></span><br><span class="line"><span class="string">    url：需要爬取的url地址</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident / 5.0;&quot;</span>&#125;</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_file</span>(<span class="params">html, filename</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    作用：将html内容写入本地文件</span></span><br><span class="line"><span class="string">    html：服务器响应文件内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在保存&quot;</span> + filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heima_forum</span>(<span class="params">begin_page, end_page</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    作用：黑马论坛爬虫调度器，负责组合处理每个页面的url</span></span><br><span class="line"><span class="string">    url：黑马论坛的url</span></span><br><span class="line"><span class="string">    begin_page:起始页码</span></span><br><span class="line"><span class="string">    end_page:结束页</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(begin_page, end_page + <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://book.douban.com/latest?subcat=%E5%85%A8%E9%83%A8&amp;p=<span class="subst">&#123;page&#125;</span>.html&#x27;</span></span><br><span class="line">        file_name = <span class="string">&quot;第&quot;</span> + <span class="built_in">str</span>(page) + <span class="string">&quot;页.html&quot;</span></span><br><span class="line">        html = load_page(url)</span><br><span class="line">        save_file(html, file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    begin_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始页：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入结束页：&quot;</span>))</span><br><span class="line">    heima_forum(begin_page, end_page)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="方法1语法解释"><a href="#方法1语法解释" class="headerlink" title="方法1语法解释"></a>方法1语法解释</h1><h2 id="format"><a href="#format" class="headerlink" title=".format"></a>.format</h2><p>在Python中，<code>str.format()</code> 方法用于格式化字符串。给定一个字符串和一个或多个值，该方法会返回一个新字符串，其中某些值（通过花括号 <code>&#123;&#125;</code> 指定）被替换为传递给 <code>format()</code> 方法的值。</p><p>在你提供的脚本中，<code>url_template</code> 是一个包含占位符 <code>&#123;&#125;</code> 的字符串，表示URL中的一个可变部分。这个占位符将被 <code>format()</code> 方法中的参数值替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_template = <span class="string">&quot;https://www.douban.com/tag/%E7%A4%BE%E5%8C%BA/article?start=&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>这里，<code>&#123;&#125;</code> 是将被替换的占位符。当你调用 <code>url_template.format(i)</code> 时，<code>i</code> 的值会被插入到字符串中的 <code>&#123;&#125;</code> 位置。</p><p>例如，如果 <code>i</code> 的值是 <code>0</code>，那么 <code>url_template.format(0)</code> 将返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.douban.com/tag/%E7%A4%BE%E5%8C%BA/article?start=0</span><br></pre></td></tr></table></figure><p>如果 <code>i</code> 的值是 <code>10</code>，那么 <code>url_template.format(10)</code> 将返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.douban.com/tag/%E7%A4%BE%E5%8C%BA/article?start=10</span><br></pre></td></tr></table></figure><p>在你的脚本中，这个 <code>format()</code> 方法被用在 <code>for</code> 循环中，每次循环时 <code>i</code> 的值都会改变（从 <code>0</code> 开始，每次增加 <code>10</code>，直到 <code>20</code>，但由于 <code>range</code> 的结束值是不包含的，所以实际上只会取到 <code>0</code>, <code>10</code>, <code>20</code> 这三个值），从而生成不同的URL来爬取豆瓣社区图文的不同页面。</p><h2 id="疑问：为什么后缀是text保存的为什么却是html文件"><a href="#疑问：为什么后缀是text保存的为什么却是html文件" class="headerlink" title="疑问：为什么后缀是text保存的为什么却是html文件"></a>疑问：为什么后缀是text保存的为什么却是html文件</h2><p>首先，<code>.text</code> 并不是指文件的后缀名，而是指 <code>Response</code> 对象的一个属性名。这个属性包含了HTTP响应体的文本内容，它是以字符串形式呈现的，并且这个字符串的内容通常是HTML（对于网页请求来说）。但是，<code>.text</code> 属性本身并不决定保存文件时的后缀名。</p><p>当您使用 <code>response.text</code> 获取到HTML内容后，如果您想将其保存为文件，您可以自行选择文件的后缀名。通常，对于HTML内容，我们会选择 <code>.html</code> 或 <code>.htm</code> 作为后缀名，因为这样可以更清晰地表明文件的类型和内容。</p><p>例如，您可以使用以下Python代码将 <code>response.text</code> 保存为一个HTML文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(response.text)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>&#39;example.html&#39;</code> 是您选择的文件名和后缀名，它告诉操作系统和任何查看该文件的人，这是一个HTML文件。</p><p>所以，总结来说，<code>.text</code> 是 <code>Response</code> 对象的一个属性，用于获取响应体的文本内容；而文件的后缀名（如 <code>.html</code>）是您在保存文件时自行选择的，用于表示文件的类型和内容。这两者之间没有直接的关联或依赖关系。</p><h2 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h2><p><code>enumerate()</code> 函数是Python内置的一个非常实用的函数，它通常用于在for循环中获取每个元素的索引及其对应的值。这个函数会将一个可遍历的数据对象（例如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标，即它会将一个可遍历的数据对象转换成一个包含索引和元素值的枚举对象。</p><p>基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(iterable, start=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li><code>iterable</code>：一个可遍历的数据对象，例如列表、元组或字符串。</li><li><code>start</code>：索引的起始位置，默认为0。</li></ul><p>返回值是一个枚举对象，该对象包含每个元素的索引和值，通常会在for循环中被解包。</p><p>下面是一个简单的示例，展示了如何使用<code>enumerate()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Fruit: <span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出将会是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Index: 0, Fruit: apple</span><br><span class="line">Index: 1, Fruit: banana</span><br><span class="line">Index: 2, Fruit: cherry</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>enumerate(fruits)</code> 会生成一个枚举对象，该对象在每次迭代时都会返回一个包含当前索引（从0开始）和当前水果名称的元组。然后，我们通过for循环将这些元组解包到<code>index</code>和<code>fruit</code>变量中，并打印出来。</p><p><code>enumerate()</code>函数在需要同时跟踪元素索引和元素值的情况下非常有用，例如，在处理列表、元组或字符串时，你可能需要知道每个元素的位置。</p><h2 id="保存为html文件到一个具体目录"><a href="#保存为html文件到一个具体目录" class="headerlink" title="保存为html文件到一个具体目录"></a>保存为html文件到一个具体目录</h2><p>代码解读如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(output_dir, <span class="string">f&#x27;page_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.html&#x27;</span>), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(html)</span><br></pre></td></tr></table></figure><ul><li><code>output_dir</code>：这是一个字符串变量，代表输出文件的目录路径。</li><li><code>os.path.join(output_dir, f&#39;page_&#123;i+1&#125;.html&#39;)</code>：此函数用于将<code>output_dir</code>目录与文件名（例如<code>&#39;page_1.html&#39;</code>、<code>&#39;page_2.html&#39;</code>等，具体取决于<code>i</code>的值）<strong>合并</strong>，从而生成文件的完整路径。<code>f&#39;page_&#123;i+1&#125;.html&#39;</code>是一个f-string（格式化字符串字面量），它允许您在字符串中直接嵌入Python表达式（此处为<code>i+1</code>）。</li><li><code>&#39;w&#39;</code>：这是<code>open()</code>函数的模式参数，表示以<strong>写入模式</strong>打开文件。若文件已存在，则会被覆盖；若不存在，则会自动创建。</li><li><code>encoding=&#39;utf-8&#39;</code>：此参数指定了文件的编码格式为UTF-8，这对于确保文件中包含非ASCII字符（如中文）时，能够正确读写至关重要。</li><li><code>as file</code>：此部分将打开的文件对象赋给变量<code>file</code>，您可以通过该变量来操作文件（如写入数据）。</li><li><code>file.write(html)</code>：此行代码负责将变量<code>html</code>（包含HTML内容的字符串）写入之前打开的文件中。</li></ul><p>由于使用了<code>with</code>语句，因此无需手动关闭文件。当<code>with</code>块执行完毕后，文件会自动关闭，这有助于避免文件泄露或损坏等潜在问题。</p><ul><li><code>with</code> 是Python中的一个上下文管理器，它允许代码块在执行前后，自动执行某些设置或清理工作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样例1：爬取豆瓣top250</title>
      <link href="/2024/10/28/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3top250/"/>
      <url>/2024/10/28/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3top250/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头，模拟浏览器访问，以避免被网站反爬虫机制阻止</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;豆瓣评分top250的电影：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> start_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">    <span class="comment"># 构造豆瓣电影Top250的URL，start参数用于分页</span></span><br><span class="line">    response = requests.get(<span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;start_num&#125;</span>&quot;</span>,headers=headers)</span><br><span class="line">    <span class="comment"># 获取响应内容</span></span><br><span class="line">    text = response.text</span><br><span class="line">    <span class="comment"># 使用BeautifulSoup解析HTML文档</span></span><br><span class="line">    soup = bs4.BeautifulSoup(text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="comment">#span 标签下  class=&quot;title&quot;</span></span><br><span class="line">    all_movies = soup.find_all(<span class="string">&quot;span&quot;</span>, &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;title&quot;</span>&#125;)</span><br><span class="line">    i = start_num+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> all_movies:</span><br><span class="line">        <span class="keyword">if</span> movie.string[<span class="number">1</span>]== <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        s = <span class="built_in">str</span>(i)+<span class="string">&quot;:&quot;</span>+movie.string</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>加入评分</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头，模拟浏览器访问，以避免被网站反爬虫机制阻止</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;豆瓣评分top250的电影：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> start_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">    <span class="comment"># 构造豆瓣电影Top250的URL，start参数用于分页</span></span><br><span class="line">    response = requests.get(<span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;start_num&#125;</span>&quot;</span>, headers=headers)</span><br><span class="line">    <span class="comment"># 获取响应内容</span></span><br><span class="line">    text = response.text</span><br><span class="line">    <span class="comment"># 使用BeautifulSoup解析HTML文档</span></span><br><span class="line">    soup = bs4.BeautifulSoup(text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">    all_movies = soup.find_all(<span class="string">&quot;div&quot;</span>, &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;item&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, movie <span class="keyword">in</span> <span class="built_in">enumerate</span>(all_movies, start=start_num+<span class="number">1</span>):</span><br><span class="line">        title_tag = movie.find(<span class="string">&quot;span&quot;</span>, &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;title&quot;</span>&#125;)</span><br><span class="line">        star_tag = movie.find(<span class="string">&quot;span&quot;</span>, &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;rating_num&quot;</span>&#125;)</span><br><span class="line">        title = title_tag.get_text(strip=<span class="literal">True</span>) <span class="keyword">if</span> title_tag <span class="keyword">else</span> <span class="string">&quot;未知电影&quot;</span></span><br><span class="line">        star = star_tag.get_text(strip=<span class="literal">True</span>) <span class="keyword">if</span> star_tag <span class="keyword">else</span> <span class="string">&quot;未知评分&quot;</span></span><br><span class="line">        <span class="comment">#strip=True参数去除任何前导或尾随的空白字符。</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;idx&#125;</span>:<span class="subst">&#123;title&#125;</span>\n评分：<span class="subst">&#123;star&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2024/10/26/ES6/"/>
      <url>/2024/10/26/ES6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>~~博主说学vue之前要先学这玩意儿，不懂那学学吧~~<p><strong>以下内容部分实例代码参考了dengruicode.com的内容</strong></p><h2 id="ECMAScript-的背景"><a href="#ECMAScript-的背景" class="headerlink" title="ECMAScript 的背景"></a><font style="color:rgb(51, 51, 51);">ECMAScript 的背景</font></h2><p><font style="color:rgb(51, 51, 51);">JavaScript 是大家所了解的语言名称，但是这个语言名称是商标（ Oracle 公司注册的商标）。因此，JavaScript 的正式名称是 ECMAScript 。1996年11月，JavaScript 的创造者网景公司将 JS 提交给</font><u><font style="color:rgb(51, 51, 51);">国际化标准组织 ECMA</font></u><font style="color:rgb(51, 51, 51);">（European computer manufactures association，欧洲计算机制造联合会），</font><u><font style="color:rgb(51, 51, 51);">希望这种语言能够成为国际标准</font></u><font style="color:rgb(51, 51, 51);">，随后 ECMA 发布了规定浏览器脚本语言的标准，即 ECMAScript。这也有利于这门语言的开放和中立。</font></p><h2 id="ECMAScript-的历史"><a href="#ECMAScript-的历史" class="headerlink" title="ECMAScript 的历史"></a><font style="color:rgb(51, 51, 51);">ECMAScript 的历史</font></h2><p><font style="color:rgb(51, 51, 51);">ES6 是 ECMAScript 标准十余年来变动最大的一个版本，为其添加了许多新的语法特性。</font></p><ul><li><font style="color:rgb(51, 51, 51);">1997 年 ECMAScript 1.0 诞生。</font></li><li><font style="color:rgb(51, 51, 51);">1998 年 6 月 ECMAScript 2.0 诞生，包含一些小的更改，用于同步独立的 ISO 国际标准。</font></li><li><font style="color:rgb(51, 51, 51);">1999 年 12 月 ECMAScript 3.0诞生，它是一个巨大的成功，在业界得到了广泛的支持，它奠定了 JS 的基本语法，被其后版本完全继承。直到今天，我们一开始学习 JS ，其实就是在学 3.0 版的语法。</font></li><li><font style="color:rgb(51, 51, 51);">2000 年的 ECMAScript 4.0 是当下 ES6 的前身，但由于这个版本太过激烈，对 ES 3 做了彻底升级，所以暂时被”和谐”了。</font></li><li><font style="color:rgb(51, 51, 51);">2009 年 12 月，ECMAScript 5.0 版正式发布。ECMA 专家组预计 ECMAScript 的第五个版本会在 2013 年中期到 2018 年作为主流的开发标准。2011年6月，ES 5.1 版发布，并且成为 ISO 国际标准。</font></li><li><font style="color:rgb(51, 51, 51);">2013 年，ES6 草案冻结，不再添加新的功能，新的功能将被放到 ES7 中；2015年6月， ES6 正式通过，成为国际标准。</font></li></ul><h2 id="ES6-的目标与愿景"><a href="#ES6-的目标与愿景" class="headerlink" title="ES6 的目标与愿景"></a><font style="color:rgb(51, 51, 51);">ES6 的目标与愿景</font></h2><p><font style="color:rgb(51, 51, 51);">成为更好编写的开发语言有以下目标。</font></p><p><font style="color:rgb(51, 51, 51);">适应更复杂的应用；实现代码库之间的共享；不断迭代维护新版本。</font></p><h1 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a><font style="color:rgb(51, 51, 51);">开始学习</font></h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><font style="color:rgb(51, 51, 51);">Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</font></p><p><u><font style="color:rgb(51, 51, 51);">ps：跟c++里面那个标准库里的那个set不太一样，c++的那个是自带排序的</font></u></p><p><font style="color:rgb(51, 51, 51);">实例</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> set) &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用for...of循环遍历 Set集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;for...of&quot;</span>, item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用forEach方法来遍历 Set集合</span></span><br><span class="line">    fruits.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;forEach&quot;</span>, value)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><font style="background-color:rgb(253, 253, 254);">存储键值对</font></p><p><font style="color:rgb(51, 51, 51);">实例：</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">        [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;邓瑞&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;男&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;web&quot;</span>, <span class="string">&quot;dengruicode.com&quot;</span>]</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用forEach方法遍历Map集合的键值对</span></span><br><span class="line">    person.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;forEach&quot;</span>, key, value)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="私有属性、存取器"><a href="#私有属性、存取器" class="headerlink" title="私有属性、存取器"></a>私有属性、存取器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        name</span><br><span class="line">        #web <span class="comment">//私有属性是指仅在类内部可访问和操作的属性, 外部无法直接访问和修改，需用到下面两种取存器</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, web</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">            <span class="variable language_">this</span>.#web = web</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用存取器 getter 获取私有属性</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">web</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#web</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用存取器 setter 设置私有属性</span></span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">web</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#web = value</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`姓名:<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 个人网站:<span class="subst">$&#123;<span class="variable language_">this</span>.web&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;邓瑞&quot;</span>, <span class="string">&quot;dengruicode.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person&quot;</span>, person)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web&quot;</span>, person.<span class="property">web</span>) <span class="comment">//使用存取器 getter 获取私有属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info&quot;</span>, person.<span class="title function_">info</span>())</span><br><span class="line"></span><br><span class="line">    person.<span class="property">web</span> = <span class="string">&quot;www.dengruicode.com&quot;</span> <span class="comment">//使用存取器 setter 设置私有属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web&quot;</span>, person.<span class="property">web</span>)</span><br></pre></td></tr></table></figure><h3 id="类的继承extends"><a href="#类的继承extends" class="headerlink" title="类的继承extends"></a>类的继承extends</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">       name</span><br><span class="line">       gender</span><br><span class="line"></span><br><span class="line">       <span class="title function_">constructor</span>(<span class="params">name, gender</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 休息中...`</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//子类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">David</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">       web</span><br><span class="line"></span><br><span class="line">       <span class="title function_">constructor</span>(<span class="params">name, gender, web</span>) &#123;</span><br><span class="line">           <span class="variable language_">super</span>(name, gender) <span class="comment">//调用父类构造函数</span></span><br><span class="line"></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">web</span> = web</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 正在吃饭...`</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> david = <span class="keyword">new</span> <span class="title class_">David</span>(<span class="string">&quot;邓瑞&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;dengruicode.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;david&quot;</span>, david)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web&quot;</span>, david.<span class="property">web</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>, david.<span class="title function_">eat</span>())</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gender&quot;</span>, david.<span class="property">gender</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep&quot;</span>, david.<span class="title function_">sleep</span>())</span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p><font style="background-color:rgb(253, 253, 254);">这是一种表达式，允许从数组或对象中提取数据，并将提取的数据赋值给声明的变量。这种方法可以使代码更加简洁和易于理解。</font></p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p><strong>基本用法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x:&quot;</span>, x, <span class="string">&quot;y:&quot;</span>, y); <span class="comment">// 输出: x: 1 y: 2</span></span><br></pre></td></tr></table></figure><p>这里，数组<code>[1, 2]</code>中的第一个元素赋值给了变量<code>x</code>，第二个元素赋值给了变量<code>y</code>。</p><p><strong>跳过某些元素</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, , c] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c:&quot;</span>, c); <span class="comment">// 输出: c: 30</span></span><br></pre></td></tr></table></figure><p>这里，数组中的第一个和第二个元素被跳过，第三个元素赋值给了变量<code>c</code>。</p><p><strong>扩展运算符</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [A, ...B] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A:&quot;</span>, A, <span class="string">&quot;B:&quot;</span>, B); <span class="comment">// 输出: A: 1 B: [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>这里，数组的第一个元素赋值给了变量<code>A</code>，剩余的元素组成了一个新的数组赋值给了变量<code>B</code>。</p><p><strong>默认值</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x2, y2 = <span class="number">200</span>] = [<span class="number">100</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x2:&quot;</span>, x2, <span class="string">&quot;y2:&quot;</span>, y2); <span class="comment">// 输出: x2: 100 y2: 200</span></span><br></pre></td></tr></table></figure><p>如果数组解构时某个位置没有对应的值，则可以使用默认值。这里<code>y2</code>的默认值是<code>200</code>。</p><p><strong>两数交换</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y3 = <span class="number">20</span>;</span><br><span class="line">[x3, y3] = [y3, x3];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x3:&quot;</span>, x3, <span class="string">&quot;y3:&quot;</span>, y3); <span class="comment">// 输出: x3: 20 y3: 10</span></span><br></pre></td></tr></table></figure><p>通过数组解构，可以很方便地交换两个变量的值。</p><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p><strong>基本用法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, name); <span class="comment">// 输出: name: 邓瑞</span></span><br></pre></td></tr></table></figure><p>从对象<code>person</code>中提取<code>name</code>属性的值，并赋值给变量<code>name</code>。</p><p><strong>重命名</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: userName, gender, web &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;userName:&quot;</span>, userName, <span class="string">&quot;gender:&quot;</span>, gender, <span class="string">&quot;web:&quot;</span>, web); <span class="comment">// 输出: userName: 邓瑞 gender: 男 web: dengruicode.com</span></span><br></pre></td></tr></table></figure><p>这里，将<code>name</code>属性的值赋给了变量<code>userName</code>，同时提取了<code>gender</code>和<code>web</code>属性的值。</p><p><strong>默认值</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; address = <span class="string">&quot;安徽&quot;</span> &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>, address); <span class="comment">// 输出: address: 安徽</span></span><br></pre></td></tr></table></figure><p>如果对象解构时某个属性不存在，则可以使用默认值。这里<code>person</code>对象中没有<code>address</code>属性，所以<code>address</code>的默认值是<code>&quot;安徽&quot;</code>。</p><p>解构赋值是ES6引入的一个非常有用的特性，它使得从数组或对象中提取数据变得更加直观和简洁。</p><h2 id="字符串常见函数方法"><a href="#字符串常见函数方法" class="headerlink" title="字符串常见函数方法"></a>字符串常见函数方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;dengruicode.com&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 字符串长度  </span></span><br><span class="line"><span class="keyword">let</span> len = web.<span class="property">length</span>;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字符串长度:&quot;</span>, len); <span class="comment">// 输出: 字符串长度: 14  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 转小写  </span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;DAVID&quot;</span>.<span class="title function_">toLowerCase</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;转小写:&quot;</span>, str1); <span class="comment">// 输出: 转小写: david  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 转大写  </span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;luna&quot;</span>.<span class="title function_">toUpperCase</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;转大写:&quot;</span>, str2); <span class="comment">// 输出: 转大写: LUNA  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回字符串在索引处的字符  </span></span><br><span class="line"><span class="keyword">let</span> str3 = web[<span class="number">2</span>];  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回字符串在索引处的字符:&quot;</span>, str3); <span class="comment">// 输出: 返回字符串在索引处的字符: g  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 字符串转为字符数组  </span></span><br><span class="line"><span class="keyword">let</span> str4 = [...web];  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字符串转为字符数组:&quot;</span>, str4); <span class="comment">// 输出: 字符串转为字符数组: [ &#x27;d&#x27;, &#x27;e&#x27;, &#x27;n&#x27;, &#x27;g&#x27;, &#x27;r&#x27;, &#x27;u&#x27;, &#x27;i&#x27;, &#x27;c&#x27;, &#x27;o&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;.&#x27;, &#x27;c&#x27;, &#x27;o&#x27;, &#x27;m&#x27; ]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 字符串转 int  </span></span><br><span class="line"><span class="keyword">let</span> number = <span class="built_in">parseInt</span>(<span class="string">&quot;168&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;字符串转int:&quot;</span>, number); <span class="comment">// 输出: 字符串转int: 168  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 字符串替换 (replaceAll 是 ES2021 新增的)  </span></span><br><span class="line"><span class="keyword">let</span> str6 = web.<span class="title function_">replaceAll</span>(<span class="string">&quot;co&quot;</span>, <span class="string">&quot;y&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;替换全部字符串:&quot;</span>, str6); <span class="comment">// 输出: 替换全部字符串: dengruyide.yom (注意: replaceAll 在旧版浏览器中可能不受支持)  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> str7 = web.<span class="title function_">replace</span>(<span class="string">&quot;co&quot;</span>, <span class="string">&quot;y&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;替换1个字符串:&quot;</span>, str7); <span class="comment">// 输出: 替换1个字符串: dengruyide.com (只替换第一个出现的 &quot;co&quot;)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 去除字符串两侧指定的字符 (默认为空白字符)  </span></span><br><span class="line"><span class="keyword">let</span> str8 = <span class="string">&quot;   dengruicode.com   &quot;</span>.<span class="title function_">trim</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;去除字符串两侧指定的字符:&quot;</span>, str8); <span class="comment">// 输出: 去除字符串两侧指定的字符: dengruicode.com  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断是否包含某个字符串  </span></span><br><span class="line"><span class="keyword">let</span> result = web.<span class="title function_">includes</span>(<span class="string">&quot;dengrui&quot;</span>); <span class="comment">// true  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是否包含某个字符串:&quot;</span>, result); <span class="comment">// 输出: 是否包含某个字符串: true  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回字符串中第一次出现某个字符串的位置, 若不存在则返回 -1  </span></span><br><span class="line"><span class="keyword">let</span> result2 = web.<span class="title function_">indexOf</span>(<span class="string">&quot;dengrui&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回字符串中第一次出现某个字符串的位置:&quot;</span>, result2); <span class="comment">// 输出: 返回字符串中第一次出现某个字符串的位置: 0  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> result3 = <span class="string">&quot;www.dengruicode.com&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;dengrui&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回字符串中第一次出现某个字符串的位置:&quot;</span>, result3); <span class="comment">// 输出: 返回字符串中第一次出现某个字符串的位置: 4 (从 &quot;www.&quot; 后开始计算)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断一个字符串是否以指定的前缀开头  </span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="string">&quot;www.dengruicode.com&quot;</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;www&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断一个字符串是否以指定的前缀开头:&quot;</span>, result4); <span class="comment">// 输出: 判断一个字符串是否以指定的前缀开头: true  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断一个字符串是否以指定的后缀结尾  </span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="string">&quot;www.dengruicode.com&quot;</span>.<span class="title function_">endsWith</span>(<span class="string">&quot;net&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断一个字符串是否以指定的后缀结尾:&quot;</span>, result5); <span class="comment">// 输出: 判断一个字符串是否以指定的后缀结尾: false  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 将字符串按照指定字符分割成数组  </span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="string">&quot;a,b,c,d&quot;</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;将字符串按照指定字符分割成数组:&quot;</span>, arr); <span class="comment">// 输出: 将字符串按照指定字符分割成数组: [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 字符串截取 (substr 方法已被弃用, 建议使用 substring 或 slice)  </span></span><br><span class="line"><span class="comment">// 但为了演示, 这里还是使用 substr  </span></span><br><span class="line"><span class="keyword">let</span> subStr = web.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">7</span>); <span class="comment">// dengrui  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;截取字符串的前7个字符:&quot;</span>, subStr); <span class="comment">// 输出: 截取字符串的前7个字符: dengrui  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> subStr2 = web.<span class="title function_">substr</span>(-<span class="number">3</span>); <span class="comment">// com  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;截取字符串的最后3个字符:&quot;</span>, subStr2); <span class="comment">// 输出: 截取字符串的最后3个字符: com (注意: 负数索引从字符串末尾开始计算)  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> subStr3 = web.<span class="title function_">substr</span>(<span class="number">4</span>); <span class="comment">// ruicode.com  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从字符串的第5个位置开始截取直至字符串末尾:&quot;</span>, subStr3); <span class="comment">// 输出: 从字符串的第5个位置开始截取直至字符串末尾: ruicode.com  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 重复字符串  </span></span><br><span class="line"><span class="keyword">let</span> repeatstr = <span class="string">&quot;David&quot;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;重复3次字符串&quot;</span>, repeatstr); <span class="comment">// 输出: 重复3次字符串 DavidDavidDavid  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 在字符串前添加指定数量的填充字符, 直到该字符串达到指定的长度  </span></span><br><span class="line"><span class="keyword">let</span> padStart = <span class="string">&quot;David&quot;</span>.<span class="title function_">padStart</span>(<span class="number">15</span>, <span class="string">&quot;-&quot;</span>); <span class="comment">// 由于 David 占 5 个字符, 因此需要再添加 10 个横线, 即可达到总长度 15  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;padStart:&quot;</span>, padStart); <span class="comment">// 输出: padStart: ----------David  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 在字符串后添加指定数量的填充字符, 直到该字符串达到指定的长度  </span></span><br><span class="line"><span class="keyword">let</span> padEnd = <span class="string">&quot;David&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">10</span>, <span class="string">&quot;-&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;padEnd:&quot;</span>, padEnd); <span class="comment">// 输出: padEnd: David----- (只添加了 5 个横线, 因为原字符串已经占了 5 个字符)</span></span><br></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>Promise 是 JavaScript 中用于处理异步操作的一种机制。它代表了一个在未来某个时刻可能会完成或失败的操作，并允许你为这两种情况分别指定处理函数。Promise 提供了更优雅的方式来处理异步操作，避免了传统的回调地狱（callback hell）。</p><h3 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h3><ol><li><strong>Pending（待处理）</strong>：这是 Promise 的初始状态，表示异步操作还未完成。</li><li><strong>Fulfilled（已履行）</strong>：当异步操作成功完成时，Promise 的状态会变为 Fulfilled，此时可以调用 <code>.then()</code> 方法来处理成功的结果。</li><li><strong>Rejected（被驳回）</strong>：当异步操作失败时，Promise 的状态会变为 Rejected，此时可以调用 <code>.catch()</code> 方法来处理错误。</li></ol><h3 id="Promise-的基本用法"><a href="#Promise-的基本用法" class="headerlink" title="Promise 的基本用法"></a>Promise 的基本用法</h3><p>创建一个 Promise 对象时，你需要传递一个执行器函数（executor function）给 Promise 构造函数。这个执行器函数接受两个参数：<code>resolve</code> 和 <code>reject</code>，它们都是函数。</p><ul><li><code>resolve(value)</code>：当异步操作成功时，调用此函数，并将操作的结果作为参数传递。这会将 Promise 的状态从 Pending 变为 Fulfilled。</li><li><code>reject(reason)</code>：当异步操作失败时，调用此函数，并将错误信息作为参数传递。这会将 Promise 的状态从 Pending 变为 Rejected。</li></ul><h3 id="Promise-的链式调用"><a href="#Promise-的链式调用" class="headerlink" title="Promise 的链式调用"></a>Promise 的链式调用</h3><p>Promise 提供了 <code>.then()</code> 和 <code>.catch()</code> 方法来分别处理 Fulfilled 和 Rejected 状态。这两个方法都返回一个新的 Promise，这允许你进行链式调用。</p><ul><li><code>.then(onFulfilled, onRejected)</code>：当 Promise 状态变为 Fulfilled 时，调用 <code>onFulfilled</code> 函数；当状态变为 Rejected 时，调用 <code>onRejected</code> 函数（可选）。</li><li><code>.catch(onRejected)</code>：这是 <code>.then(null, onRejected)</code> 的简写形式，专门用于处理错误。</li></ul><p>此外，Promise 还提供了 <code>.finally()</code> 方法，无论 Promise 的最终状态如何，都会执行 <code>finally</code> 中的回调函数。这通常用于清理工作，如关闭数据库连接、清除定时器等。</p><h3 id="示例代码解析"><a href="#示例代码解析" class="headerlink" title="示例代码解析"></a>示例代码解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//resolve(&quot;邮件发送成功&quot;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;邮件发送失败&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result) <span class="comment">// 如果 resolve 被调用，这里会打印结果</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span>, error) <span class="comment">// 如果 reject 被调用，这里会打印错误信息</span></span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步执行结束&quot;</span>) <span class="comment">// 无论成功还是失败，这里都会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个 Promise 对象，并通过调用 <code>reject</code> 函数模拟了一个异步操作的失败。因此，<code>.then()</code> 方法中的回调函数不会被执行，而 <code>.catch()</code> 方法中的回调函数会捕获到错误信息并打印出来。最后，<code>.finally()</code> 方法中的回调函数会执行，打印出“异步执行结束”。</p><p>Promise 是处理异步操作的重要工具，它使得代码更加清晰、易于维护。通过合理地使用 Promise，你可以有效地管理复杂的异步流程。</p><h3 id="同步与异步编程概念及示例"><a href="#同步与异步编程概念及示例" class="headerlink" title="同步与异步编程概念及示例"></a>同步与异步编程概念及示例</h3><h4 id="同步编程"><a href="#同步编程" class="headerlink" title="同步编程"></a>同步编程</h4><ul><li><strong>定义</strong>：代码按照编写顺序逐行执行，后续的代码必须等待当前正在执行的代码完成之后才能执行。</li><li><strong>特点</strong>：当遇到耗时的操作时（如网络请求、文件读写等），主线程会被阻塞，直到该操作完成。</li><li><strong>示例</strong>：就像在单车道路段上发生交通事故导致交通堵塞，只有拖走事故车辆后，后续车辆才能继续行驶。</li></ul><h4 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h4><ul><li><strong>定义</strong>：当遇到耗时的操作时，主线程不会被阻塞，而是继续执行后续的代码，等待耗时操作完成后，再通过回调函数或其他机制处理结果。</li><li><strong>特点</strong>：提高了程序的响应性和性能，因为主线程可以继续执行其他任务。</li><li><strong>示例</strong>：在具有多车道的高速公路上，发生交通事故后，可以走其他车道继续行驶。</li></ul><h4 id="async-await-编程"><a href="#async-await-编程" class="headerlink" title="async&#x2F;await 编程"></a>async&#x2F;await 编程</h4><ul><li><strong>async</strong>：当一个函数被标记为<code>async</code>后，该函数会返回一个<code>Promise</code>对象。这允许我们使用<code>await</code>关键字等待异步操作的结果。</li><li><strong>await</strong>：只能在<code>async</code>函数内部使用。加上<code>await</code>关键字后，会在执行到这一行时暂停函数的剩余部分，等待<code>Promise</code>对象解决（即异步操作完成），然后继续执行并获取到异步操作返回的数据。</li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>以下是一个HTML文档，其中包含了使用<code>axios</code>库进行网络请求的示例，展示了回调地狱和<code>async/await</code>编程风格的对比。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>异步编程示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 回调地狱示例</span></span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">web</span> == <span class="string">&quot;dengruicode.com&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/id/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">response2</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get2.data:&quot;</span>, response2.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (response2.<span class="property">data</span>.<span class="property">data</span>.<span class="property">name</span> == <span class="string">&quot;邓瑞&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/search/title/入门&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                  .<span class="title function_">then</span>(<span class="function"><span class="params">response3</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get3.data:&quot;</span>, response3.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                  &#125;);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// async/await 示例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.data:&quot;</span>, response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">web</span> === <span class="string">&quot;dengruicode.com&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> response2 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/id/1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get2.data:&quot;</span>, response2.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (response2.<span class="property">data</span>.<span class="property">data</span>.<span class="property">name</span> === <span class="string">&quot;邓瑞&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> response3 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/search/title/入门&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get3.data:&quot;</span>, response3.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.error:&quot;</span>, error);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.finally&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getData</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先展示了回调地狱的写法，它使用了多个嵌套的<code>.then()</code>方法来处理连续的异步操作。然后，我们展示了如何使用<code>async/await</code>语法来以同步的方式编写异步代码，从而使代码更加简洁和易读。</p><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>在现代Web开发中，<code>fetch</code> 是一个非常常用的API，它基于Promise设计，用于发起HTTP请求并接收来自服务器的响应数据。<code>fetch</code> 提供了比传统的 <code>XMLHttpRequest</code> 更简洁和更强大的接口，使得处理HTTP请求变得更加直观和方便。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>fetch</code> 函数接收一个URL作为参数，并返回一个Promise对象。这个Promise对象会在请求完成时（无论是成功还是失败）被解决。你可以使用 <code>.then()</code> 方法来处理成功的响应，使用 <code>.catch()</code> 方法来处理错误，而 <code>.finally()</code> 方法则会在请求完成后无论结果如何都被执行。</p><h3 id="GET-请求示例"><a href="#GET-请求示例" class="headerlink" title="GET 请求示例"></a>GET 请求示例</h3><p>在你的代码中，第一个示例展示了如何使用 <code>fetch</code> 发起一个GET请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 确保响应成功（状态码在200-299之间）</span></span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok &#x27;</span> + response.<span class="property">statusText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析JSON数据</span></span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这里，<code>response.json()</code> 方法用于将响应体解析为JSON对象。注意，在解析JSON之前，最好检查响应是否成功（即状态码是否在200-299之间），以避免在解析错误的响应时抛出异常。</p><h3 id="POST-请求示例"><a href="#POST-请求示例" class="headerlink" title="POST 请求示例"></a>POST 请求示例</h3><p>对于POST请求，你可以通过传递一个包含请求方法、头部信息和请求体的选项对象来配置 <code>fetch</code>。</p><ol><li><strong>发送表单数据</strong>：</li></ol><p>在你的代码中，第二个示例展示了如何发送表单数据（使用 <code>application/x-www-form-urlencoded</code> 编码）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;邓瑞&#x27;</span>,</span><br><span class="line">        <span class="attr">web</span>: <span class="string">&#x27;dengruicode.com&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 后续处理与GET请求相同</span></span><br></pre></td></tr></table></figure><p>这里，<code>URLSearchParams</code> 用于创建查询字符串，它会将对象转换为编码后的URL查询字符串格式。</p><ol start="2"><li><strong>发送JSON数据</strong>：</li></ol><p>第三个示例展示了如何发送JSON数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/postJson&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;邓瑞编程&#x27;</span>,</span><br><span class="line">        <span class="attr">web</span>: <span class="string">&#x27;www.dengruicode.com&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 后续处理与GET请求相同</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>JSON.stringify</code> 方法用于将JavaScript对象转换为JSON字符串。注意，当发送JSON数据时，你需要将 <code>Content-Type</code> 头部设置为 <code>application/json</code>。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>在 <code>.catch()</code> 块中，你可以捕获并处理在请求过程中发生的任何错误，例如网络问题或服务器错误。错误对象通常包含有关错误的详细信息，如错误消息和状态码。</p><h4 id="清理工作"><a href="#清理工作" class="headerlink" title="清理工作"></a>清理工作</h4><p><code>.finally()</code> 方法非常有用，因为它会在请求完成后（无论成功还是失败）执行一些清理工作，例如关闭文件、清除计时器等。</p><p>总之，<code>fetch</code> API 提供了一种简洁而强大的方式来处理HTTP请求，使得Web开发变得更加高效和愉快。通过结合使用 <code>.then()</code>、<code>.catch()</code> 和 <code>.finally()</code> 方法，你可以轻松地管理请求的生命周期，并处理各种可能的响应和错误情况。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="Axios-概述"><a href="#Axios-概述" class="headerlink" title="Axios 概述"></a>Axios 概述</h3><p>Axios 是一个基于 Promise 的网络请求库，设计用于浏览器和 Node.js 环境。它提供了丰富的配置选项，使得发送 HTTP 请求和处理响应变得简单而灵活。Axios 返回一个 Promise 对象，这意味着你可以使用 <code>.then()</code>、<code>.catch()</code> 和 <code>.finally()</code> 方法来处理异步操作的结果。</p><h3 id="Fetch-与-Axios-的对比"><a href="#Fetch-与-Axios-的对比" class="headerlink" title="Fetch 与 Axios 的对比"></a>Fetch 与 Axios 的对比</h3><ol><li><strong>环境支持</strong>：<ul><li><strong>Fetch</strong>：主要设计用于浏览器环境，虽然有一些第三方库（如 <code>node-fetch</code>）尝试将其引入 Node.js，但原生的 Fetch API 在 Node.js 中并不可用。</li><li><strong>Axios</strong>：同时支持浏览器和 Node.js 环境，这使得它成为跨平台网络请求的理想选择。</li></ul></li><li><strong>配置选项</strong>：<ul><li><strong>Fetch</strong>：虽然功能强大，但配置选项相对较少。例如，发送 JSON 数据时，你需要手动设置 <code>Content-Type</code> 头部，并可能需要将对象转换为 JSON 字符串。</li><li><strong>Axios</strong>：提供了更多的配置选项，包括自动转换 JSON 数据、设置请求和响应的拦截器、处理并发请求等。此外，Axios 还允许你轻松地配置默认设置，如基础 URL、超时时间等。</li></ul></li><li><strong>错误处理</strong>：<ul><li><strong>Fetch</strong>：错误处理相对繁琐。当请求失败时，返回的 Promise 会被拒绝，但你需要检查响应的状态码来确定请求是否真的失败（例如，4xx 和 5xx 状态码）。</li><li><strong>Axios</strong>：错误处理更加直观。当请求失败时，Axios 会抛出一个错误对象，其中包含有关错误的详细信息，如状态码、响应数据和消息。这使得错误处理更加简单和一致。</li></ul></li><li><strong>拦截器</strong>：<ul><li><strong>Fetch</strong>：不直接支持拦截器功能，但你可以通过封装 <code>fetch</code> 函数来实现类似的功能。</li><li><strong>Axios</strong>：提供了请求和响应的拦截器功能，这使得你可以在请求发送之前或响应到达之前对其进行处理或修改。这对于添加认证令牌、处理全局错误或日志记录等任务非常有用。</li></ul></li><li><strong>自动转换 JSON</strong>：<ul><li><strong>Fetch</strong>：不会自动将响应数据转换为 JSON 对象。你需要手动调用 <code>response.json()</code> 方法来解析 JSON 数据。</li><li><strong>Axios</strong>：默认情况下会自动将响应数据转换为 JSON 对象（如果服务器返回的是 JSON 格式的数据）。这使得处理 JSON 响应更加简单和直接。</li></ul></li><li><strong>取消请求</strong>：<ul><li><strong>Fetch</strong>：原生不支持取消请求的功能，但你可以使用 <code>AbortController</code> 来实现这一点（在较新的浏览器中可用）。</li><li><strong>Axios</strong>：提供了内置的取消请求功能，你可以使用 <code>CancelToken</code> 或 <code>AbortController</code>（在 Axios 的新版本中）来取消正在进行的请求。</li></ul></li></ol><h3 id="Axios-示例代码"><a href="#Axios-示例代码" class="headerlink" title="Axios 示例代码"></a>Axios 示例代码</h3><p>在你的示例代码中，展示了如何使用 Axios 发送 GET 和 POST 请求。</p><ul><li><strong>GET 请求</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, response.<span class="property">data</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>POST 请求（表单数据）</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error)</span><br><span class="line">   &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//post请求 post</span></span><br><span class="line">   <span class="keyword">let</span> data = &#123; <span class="comment">//参数</span></span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;邓瑞&#x27;</span>,</span><br><span class="line">       <span class="attr">web</span>: <span class="string">&#x27;dengruicode.com&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   axios.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1/post&#x27;</span>, data, &#123;</span><br><span class="line">       <span class="attr">headers</span>: &#123;</span><br><span class="line">           <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.error:&quot;</span>, error)</span><br><span class="line">   &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.finally&quot;</span>)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>注意，当发送 <code>application/x-www-form-urlencoded</code> 编码的表单数据时，你需要使用 <code>qs</code> 库（或其他类似库）来序列化对象，因为 Axios 默认不会为你做这件事。但在你的示例中，由于未包含 <code>qs</code> 库的序列化步骤，如果服务器期望的是 <code>application/x-www-form-urlencoded</code> 格式的数据，则此请求可能会失败。正确的做法是使用 <code>qs.stringify(data)</code> 来序列化对象，并将其作为 <code>params</code> 传递给 <code>axios.post</code>（如果 Axios 配置为使用 URL 参数发送数据）或作为请求体的一部分，并设置正确的 <code>Content-Type</code> 头部。然而，在你的示例中，你直接将对象作为请求体传递，并设置了 <code>Content-Type</code> 头部为 <code>application/x-www-form-urlencoded</code>，这通常不是发送 JSON 以外数据的正确方式。如果你确实需要发送表单数据，你应该使用类似 <code>URLSearchParams</code> 的东西来序列化数据（但请注意，<code>URLSearchParams</code> 是浏览器内置的，不是 Axios 的）。</p><ul><li><strong>POST 请求（JSON 数据）</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1/postJson&#x27;</span>, data).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.data:&quot;</span>, response.<span class="property">data</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.error:&quot;</span>, error);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.finally&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，Axios 默认会将 <code>data</code> 对象序列化为 JSON 字符串，并设置正确的 <code>Content-Type</code> 头部为 <code>application/json</code>，因此你不需要手动进行这些操作。</p><p>总的来说，Axios 提供了比 Fetch 更丰富和灵活的功能，同时保持了简洁和易用的接口。这使得它成为许多开发者的首选网络请求库。</p><h2 id="模块化开发概述与import、export详解"><a href="#模块化开发概述与import、export详解" class="headerlink" title="模块化开发概述与import、export详解"></a>模块化开发概述与<code>import</code>、<code>export</code>详解</h2><h3 id="模块化开发概念"><a href="#模块化开发概念" class="headerlink" title="模块化开发概念"></a>模块化开发概念</h3><p>模块化开发是一种编程实践，旨在将复杂的代码拆分为多个独立的模块。每个模块负责完成特定的功能，从而提高了代码的可读性、可维护性和复用性。</p><h3 id="import与export机制"><a href="#import与export机制" class="headerlink" title="import与export机制"></a><code>import</code>与<code>export</code>机制</h3><p>在模块化开发中，<code>export</code>关键字用于将模块内部的代码（变量、函数、类等）导出，以便其他模块能够使用。而<code>import</code>关键字则用于在其他模块中导入这些导出的代码。</p><h4 id="分别导出与导入"><a href="#分别导出与导入" class="headerlink" title="分别导出与导入"></a>分别导出与导入</h4><ul><li><strong>导出</strong>：在模块文件中，可以使用<code>export</code>关键字将多个变量或函数分别导出。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&quot;邓瑞编程&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;dengruicode.com&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getWeb</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;www.dengruicode.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; title, web, getWeb &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>导入</strong>：在需要使用这些导出内容的模块中，可以使用<code>import</code>关键字进行导入。同时，可以使用<code>as</code>关键字为导入的变量或函数重命名，以避免命名冲突。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 从 index.js 文件中导入 title、web、getWeb 变量/函数，并为 title 重命名为 webTitle</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; title <span class="keyword">as</span> webTitle, web, getWeb &#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(webTitle); <span class="comment">// 邓瑞编程</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(web);      <span class="comment">// dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getWeb</span>()); <span class="comment">// www.dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="默认导出与导入"><a href="#默认导出与导入" class="headerlink" title="默认导出与导入"></a>默认导出与导入</h4><ul><li><strong>默认导出</strong>：在模块文件中，可以使用<code>export default</code>将一个对象、函数或变量作为整体默认导出。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&quot;邓瑞编程&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;dengruicode.com&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getWeb</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;www.dengruicode.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; title, web, getWeb &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>默认导入</strong>：在需要使用默认导出的模块中，可以使用<code>import</code>关键字（不带花括号）进行导入，并为其指定一个名称。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 从 index.js 文件中导入默认导出的对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">title</span>);    <span class="comment">// 邓瑞编程</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">web</span>);      <span class="comment">// dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getWeb</span>()); <span class="comment">// www.dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用as关键字进行重命名导入"><a href="#使用as关键字进行重命名导入" class="headerlink" title="使用as关键字进行重命名导入"></a>使用<code>as</code>关键字进行重命名导入</h4><p>为了避免命名冲突或提高代码的可读性，可以使用<code>import * as obj</code>语法将整个模块的内容作为一个对象导入，并通过该对象的属性来访问模块中的变量和函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 从 index.js 文件中导入所有导出的变量/函数，并将它们作为一个对象 obj 的属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">title</span>);    <span class="comment">// 邓瑞编程</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">web</span>);      <span class="comment">// dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getWeb</span>()); <span class="comment">// www.dengruicode.com</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在使用模块化开发时，需要确保HTML文件中包含<code>&lt;script type=&quot;module&quot;&gt;</code>标签，以指示浏览器该脚本应作为ES模块来处理。</li><li>VSCode扩展“Live Server”可以用于在本地开发环境中预览和运行包含ES模块的HTML文件。但请注意，确保Live Server支持ES模块，并且你的开发环境（如浏览器）也支持ES模块特性。</li></ul><p>通过模块化开发，我们可以更好地组织和管理代码，提高代码的可读性和可维护性。同时，<code>import</code>和<code>export</code>机制为我们提供了一种简洁而强大的方式来在不同模块之间共享代码。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验：自定义网络跨容器通信实战案例</title>
      <link href="/2024/10/24/%E5%AE%9E%E9%AA%8C%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C%E8%B7%A8%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/"/>
      <url>/2024/10/24/%E5%AE%9E%E9%AA%8C%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C%E8%B7%A8%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="创建自定义桥接网络"><a href="#创建自定义桥接网络" class="headerlink" title="创建自定义桥接网络"></a><strong>创建自定义桥接网络</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700678862-82c52215-2aa4-45c0-8d9b-fd206db0e7a6.png"></p><h2 id="启动容器并连接到自定义网络"><a href="#启动容器并连接到自定义网络" class="headerlink" title="启动容器并连接到自定义网络"></a><strong>启动容器并连接到自定义网络</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700686266-c8fe7de6-c3cf-44f8-b9d9-b14cfe421800.png"></p><h2 id="测试跨容器通信"><a href="#测试跨容器通信" class="headerlink" title="测试跨容器通信"></a><strong>测试跨容器通信</strong></h2><p>查看两个容器的ip</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700691844-ac131ae0-dfea-4781-8f3b-ce0c39e2e894.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700697616-7c1ad243-06d3-4991-bd49-7a791b82dddb.png"></p><p>进入容器01去ping 02的ip</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700701712-c52e6733-8f10-400d-98bd-8d789e00f1e7.png"></p><p>进入容器02区ping 01的名字（自动解析为ip地址）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700705700-4e167fac-5d6d-4bbf-ab5d-2d660199c703.png"></p><p>主机与容器之间通信</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729700712144-a91e87d7-6760-4804-93dc-4e098714818b.png"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的常用命令</title>
      <link href="/2024/10/22/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/10/22/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>docker version # 显示docker的版本信息</p><p>docker info # 显示docker的系统信息，包括镜像和容器的数量</p><p>docker 命令 –help # 帮助命令</p><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><p>docker pull：用于从远程仓库拉取镜像到本地。</p><p>docker images：查看本地已有的镜像列表。</p><p>docker run：基于镜像创建并启动一个容器。</p><p>docker ps：查看正在运行的容器列表。</p><p>docker stop：停止一个正在运行的容器。</p><p>docker rm：删除一个已停止的容器。</p><p>docker rmi :删除一个镜像</p><p>docker history <image_name> :查看镜像详细信息</p><p><font style="color:rgb(24, 24, 24);">systemctl start docker #启动docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl stop docker #关闭docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl restart docker #重启docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl enable docker #设置开机自启动 </font></p><p><font style="color:rgb(24, 24, 24);">systemctl status docker #查看docker运行状态 </font></p><h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729528712963-25712f09-37e8-487d-be17-23db484109e1.png"></p><h3 id="docker-images-查看镜像"><a href="#docker-images-查看镜像" class="headerlink" title="docker images 查看镜像"></a>docker images 查看镜像</h3><p>[root@localhost &#x2F;]# docker images</p><p>:::tips<br>REPOSITORY    TAG        IMAGE ID               CREATED         SIZE</p><p>hello-world     latest      bf756fb1ae65 5     months ago    13.3kB</p><p>:::</p><p>#解释</p><p><strong>REPOSITORY</strong> 镜像的仓库源</p><p><strong>TAG</strong> 镜像标签</p><p><strong>IMAGE ID</strong> 镜像id</p><p><strong>CREATED</strong> 镜像的创建时间</p><p><strong>SIZE</strong> 镜像的大小</p><p>#可选项</p><p>Options:</p><p>-a, –all # 列出所有镜像</p><p>-q, –quiet # 只显示镜像id</p><h3 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a>docker search 搜索镜像</h3><p>[root@localhost &#x2F;]# docker search mysql</p><p>NAME                 DESCRIPTION                                           STARS                  OFFICIAL AUTOMATED</p><p>mysql                  MySQL is a widely used, open-source relation… 9604                                 [OK] </p><p>mariadb                   MariaDB is a community-developed fork of MyS… 3490                             [OK] </p><p>#解释</p><p><strong>NAME</strong> 镜像名称</p><p><strong>DESCRIPTION</strong> 镜像描述</p><p><strong>STARS</strong> 镜像的评分</p><p><strong>OFFICIAL</strong> 是否为官方镜像</p><p><strong>AUTOMATED</strong> 是否为自动构建镜像<br>#可选项，通过收藏来过滤</p><p>–filter&#x3D;STARS&#x3D;3000 #搜索出来的镜像就是STARS大于3000的</p><p>[root@localhost &#x2F;]# docker search mysql –filter&#x3D;STARS&#x3D;3000</p><p>NAME DESCRIPTION STARS OFFICIAL AUTOMATED</p><p>mysql MySQL is a widely used, open-source relation… 9604 [OK] </p><p>mariadb MariaDB is a community-developed fork of MyS… 3490 [OK] </p><h3 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h3><p>#下载镜像 docker pull 镜像名[:tag]</p><p>[root@localhost &#x2F;]# docker pull mysql</p><p>Using default tag: latest # 如果不写 tag,默认就是latest</p><p>docker pull mysql 等价于: docker pull docker.io&#x2F;library&#x2F;mysql:latest</p><p>#指定版本下载</p><p>[root@localhost &#x2F;]# docker pull mysql:5.7</p><h3 id="Docker构建"><a href="#Docker构建" class="headerlink" title="Docker构建"></a>Docker构建</h3><p>要构建自己的Docker镜像，可以使用以下命令：</p><p>docker build [OPTIONS] PATH | URL | -</p><p>docker build：构建镜像的命令。</p><p>[OPTIONS]：可选参数，用于配置构建过程，如镜像标签、构建上下文路径等。</p><p>PATH | URL | -：Dockerfile所在的路径、URL或者使用标准输入作为Dockerfile。</p><h3 id="docker-push-推送镜像"><a href="#docker-push-推送镜像" class="headerlink" title="docker push 推送镜像"></a>docker push 推送镜像</h3><p>要将本地的镜像推送到Docker仓库，可以使用以下命令：</p><p>docker push [OPTIONS] NAME[:TAG]</p><p>docker push：推送镜像的命令。</p><p>[OPTIONS]：可选参数，用于配置推送过程，如认证信息等。</p><p>NAME[:TAG]：要推送的镜像名称和标签。</p><h3 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi 删除镜像"></a>docker rmi 删除镜像</h3><p>[root@localhost &#x2F;]# docker rmi -f 镜像id #删除指定镜像</p><p>[root@localhost &#x2F;]# docker rmi -f 镜像id 镜像id 镜像id #删除多个镜像</p><p>[root@localhost &#x2F;]# docker rmi -f $(docker images -aq) #删除全部镜像</p><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729529353219-c48bf38b-4a0c-499c-ae47-08aaefcd9154.png"></p><p>容器保护三个状态：</p><ul><li><p>运行：进程正常运行&lt;&#x2F;&gt;</p></li><li><p>暂停：进程暂停，CPU不再运行，并不释放内存</p></li><li><p>停止：进程终止，回收进程占用的内存、CPU等资源</p></li><li><p>其中：</p></li><li><p>docker run：创建并运行一个容器，处于运行状态</p></li><li><p>docker pause name：让一个运行的容器暂停</p></li><li><p>docker unpause name：让一个容器从暂停状态恢复运行</p></li><li><p>docker stop name：停止一个运行的容器（杀死进程、回收内存，仅剩</font><font style="color:rgb(0, 82, 217);">文件系统</font>）</font></p></li><li><p>docker start name：让一个停止的容器再次运行</font></p></li><li><p>docker restart name：重启容器</font></p></li><li><p>docker rm：删除一个容器（进程、内存回收、文件系统彻底干掉）</font></p></li></ul></font><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><p>docker run [可选参数] image</font></p><p>#参数说明</font></p><p>–name&#x3D;”Name” 容器名字 tomcat01 tomcat02 ，用来区分容器</font></p><p>-d 后台方式运行</font></p><p>-it 使用交互方式运行，进入容器查看内容</font></p><p>-p 指定容器的端口 -p8080:80</font></p><p>-p ip:主机(即宿主机)端口：容器端口</font></p><p>-p 主机端口：容器端口 #这种方式常用</font></p><p>-p 容器端口</font></p><p>容器端口P</font></p><p>-P 随机指定端口(大写P)</font></p></font><h3 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h3><p>#docker ps 命令</font></p><p>(不加） # 列出当前正在运行的容器</font></p><p>-a # 列出当前正在运行的容器 + 带出历史运行过的容器</font></p><p>-n&#x3D;? # 显示最近创建的容器</font></p><p>-q # 只显示当前容器的编号</font></p></font><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>exit # 直接退出容器</font></p><p>Ctrl + p + q # 容器不停止退出</font></p></font><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>docker rm 容器id # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</font></p><p>docker rm-f$(docker ps -aq) # 删除所有容器 </font></p><p>docker ps-a-q|xargs docker rm # 删除所有容器</font></p></font><h3 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h3><p>docker start 容器id # 启动容器</font></p><p>docker restart 容器id # 重启容器</font></p><p>docker stop 容器id # 停止当前正在运行的容器</font></p><p>docker kill 容器id # 强制停止当前正在运行的容器</font></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ddddocr的安装和基础使用</title>
      <link href="/2024/10/18/ddddocr/"/>
      <url>/2024/10/18/ddddocr/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><font style="color:rgb(77, 77, 77);">ddddocr</font><del><font style="color:rgb(77, 77, 77);">名字真奇怪</font></del><font style="color:rgb(77, 77, 77);">是一款强大的</font><font style="color:rgb(5, 7, 59);background-color:rgb(253, 253, 254);">基于深度学习的</font><font style="color:rgb(77, 77, 77);">通用开源ocr识别库，具有高效、准确、易用的特点，广泛应用于图像处理和文字识别任务。</font></p><p><font style="color:rgb(77, 77, 77);"></font></p><p><font style="color:rgb(77, 77, 77);">常见用处：</font><del><font style="color:rgb(77, 77, 77);">在爬虫时候 </font></del><font style="color:rgb(77, 77, 77);">识别验证码</font></p><p><font style="color:rgb(77, 77, 77);"></font></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><font style="color:rgb(77, 77, 77);">安装</font></h1><p>非常easy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr</span><br></pre></td></tr></table></figure><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">ocr = ddddocr.DdddOcr(show_ad=<span class="literal">False</span>)  <span class="comment"># show\_ad=False关闭广告</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./img/img_1.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    im = f1.read()</span><br><span class="line">    yzm1 = ocr.classification(im)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./img/img_2.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    im = f2.read()</span><br><span class="line">    yzm2 = ocr.classification(im)</span><br><span class="line"><span class="built_in">print</span>(yzm1, yzm2)</span><br></pre></td></tr></table></figure><h2 id="函数解释"><a href="#函数解释" class="headerlink" title="函数解释"></a>函数解释</h2><p>当然，以下是对<code>ddddocr</code>库中<code>DdddOcr</code>类及其<code>classification</code>方法的解释，以及如何在上述代码中使用的详细说明：</p><h3 id="DdddOcr-类"><a href="#DdddOcr-类" class="headerlink" title="DdddOcr 类"></a><code>DdddOcr</code> 类</h3><p><code>DdddOcr</code> 是 <code>ddddocr</code> 库中的一个类，用于执行OCR（光学字符识别）任务，特别是针对验证码等复杂字符的识别。</p><h4 id="初始化方法（构造函数）"><a href="#初始化方法（构造函数）" class="headerlink" title="初始化方法（构造函数）"></a>初始化方法（构造函数）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ocr = ddddocr.DdddOcr(show_ad=<span class="literal">False</span>, det=<span class="literal">True</span>, ocr=<span class="literal">True</span>, cls=<span class="literal">True</span>, gpu=<span class="literal">False</span>, path_det_model=<span class="literal">None</span>, path_ocr_model=<span class="literal">None</span>, path_cls_model=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>show_ad</code>：布尔值，是否显示广告。在上述代码中，设置为 <code>False</code> 以关闭广告。</li><li><code>det</code>：布尔值，是否启用检测模型（用于定位图片中的文本区域）。通常，对于验证码识别，这个选项是启用的。</li><li><code>ocr</code>：布尔值，是否启用OCR模型（用于识别检测到的文本）。</li><li><code>cls</code>：布尔值，是否启用分类模型（用于进一步处理OCR结果，例如将数字识别为特定的验证码字符集）。</li><li><code>gpu</code>：布尔值，是否使用GPU进行加速。如果系统中有可用的GPU和相应的CUDA支持，可以设置为 <code>True</code>。</li><li><code>path_det_model</code>, <code>path_ocr_model</code>, <code>path_cls_model</code>：字符串，分别指定检测、OCR和分类模型的路径。如果未指定，将使用默认的预训练模型。</li></ul><h4 id="classification-方法"><a href="#classification-方法" class="headerlink" title="classification 方法"></a><code>classification</code> 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = ocr.classification(image, det=<span class="literal">True</span>, cls=<span class="literal">True</span>, box_limit=<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><ul><li><code>image</code>：要识别的图片，通常是一个二进制数据或经过预处理的图像数组。</li><li><code>det</code>：布尔值，是否启用检测模型。对于验证码识别，通常保持为 <code>True</code>。</li><li><code>cls</code>：布尔值，是否启用分类模型。对于验证码识别，通常也保持为 <code>True</code>。</li><li><code>box_limit</code>：整数，限制检测到的文本区域的数量。对于验证码，这个值通常不需要调整，因为验证码通常只包含一个文本区域。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><code>classification</code> 方法返回一个字符串或字符串列表，表示识别到的字符。对于验证码，通常期望返回一个字符串，因为验证码通常是一个单词或一串连续的字符。</p><h3 id="在代码中的使用"><a href="#在代码中的使用" class="headerlink" title="在代码中的使用"></a>在代码中的使用</h3><p>在上述代码中，<code>DdddOcr</code> 类被实例化，并且 <code>classification</code> 方法被用来识别两张图片中的验证码。</p><ol><li>实例化 <code>DdddOcr</code> 类，关闭广告显示。</li><li>使用 <code>with open</code> 语句打开每张图片文件，并读取其二进制内容。</li><li>调用 <code>classification</code> 方法，传入图片数据，进行验证码识别。</li><li>打印识别结果。</li></ol><p>这个过程对于两张图片是重复的，只是文件路径和存储识别结果的变量名不同。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集基础</title>
      <link href="/2024/10/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2024/10/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p><font style="color:rgb(77, 77, 77);">并查集的</font><font style="color:#DF2A3F;">逻辑结构</font><font style="color:rgb(77, 77, 77);">是一个包含N个元素的</font><strong><font style="color:rgb(77, 77, 77);">集合</font></strong><font style="color:rgb(77, 77, 77);">，如图：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724927702922-6195891c-a3ad-4456-89d3-8d5135ca654b.png"></p><p><font style="color:rgb(77, 77, 77);">并查集的</font><font style="color:#DF2A3F;">存储结构</font><font style="color:rgb(77, 77, 77);">是一个包含N个元素的</font><strong><font style="color:rgb(77, 77, 77);">树</font></strong><font style="color:rgb(77, 77, 77);">，如图：</font></p><p><font style="color:rgb(77, 77, 77);">用一个数组存储p[x]来存储每个元素（点）的父节点</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724928055679-6627571b-46c4-45cf-b673-45b115b0a24d.png"></p><h1 id="讲解知识点"><a href="#讲解知识点" class="headerlink" title="讲解知识点"></a>讲解知识点</h1><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h5><p>每个集合的根节点便是这个集合的编号，每个点存储自己的父节点(初始化)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    p[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树根：p[x]&#x3D;&#x3D;x          &#x2F;&#x2F;(父节点等于自己)</p><p>求集合编号：while(p[x]!&#x3D;x) x&#x3D;p[x]      &#x2F;&#x2F;(不是根节点的话，置换成父节点进行再次判断)</p><h5 id="路径压缩优化"><a href="#路径压缩优化" class="headerlink" title="路径压缩优化"></a>路径压缩优化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//找根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]!=x)<span class="comment">//父节点等于自己的是根节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p[x] = <span class="built_in">find</span>(p[x]);<span class="comment">//递归到根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724932291514-7a8c2934-b1a1-4b1e-9581-2cdf11eb508d.png"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="并查集的两种基本操作"><a href="#并查集的两种基本操作" class="headerlink" title="并查集的两种基本操作"></a><strong>并查集的两种基本操作</strong></h5><h6 id="1-将两个集合合并"><a href="#1-将两个集合合并" class="headerlink" title="1.将两个集合合并"></a><strong>1.将两个集合合并</strong></h6><p><code>p[find(a)] = find(b)</code></p><hr><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/35262955/1724927734784-c848861f-72ea-444c-810a-276b6c719d72.gif"></p><hr><h6 id="2-询问两个集合是否在同一集合"><a href="#2-询问两个集合是否在同一集合" class="headerlink" title="2.询问两个集合是否在同一集合"></a><strong>2.询问两个集合是否在同一集合</strong></h6><p><code>if (find(a) == find(b))</code></p><hr><hr><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://www.luogu.com.cn/problem/P3367">https://www.luogu.com.cn/problem/P3367</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//找根节点函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">&#123;</span><br><span class="line">p[x]=<span class="built_in">find</span>(p[x]);<span class="comment">//递归去找根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="comment">//初始化 ，是每个元素是一个集合 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z,x,y;</span><br><span class="line">cin&gt;&gt;z&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);<span class="comment">//合并集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))<span class="comment">//判断是否属于同一集合</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Y&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;N&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机环境安装配置(centos7)</title>
      <link href="/2024/10/16/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(centos7)/"/>
      <url>/2024/10/16/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(centos7)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1、查看VMware服务"><a href="#1、查看VMware服务" class="headerlink" title="1、查看VMware服务"></a>1、查看VMware服务</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702196-4375d419-554e-40a8-bb2e-434a3e31669b.png"></p><h2 id="2-查看vmware-网络设置，选择VMnet8，"><a href="#2-查看vmware-网络设置，选择VMnet8，" class="headerlink" title="2.查看vmware 网络设置，选择VMnet8，"></a>2.查看vmware 网络设置，选择VMnet8，</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/bmp/35262955/1729056702153-bace192f-ec88-4bfc-8791-952af27c1f0e.bmp"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35262955/1729056702035-9b7729d1-4c13-4a39-84e2-01c0aa47f11c.jpeg"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35262955/1729056702053-d025d7cc-75ab-4730-baba-59005eddf56d.jpeg"></p><h2 id="3-修改配置本机VMware-Network-Adapter-VMnet8虚拟网络，并且启动网络服务-IP、网关的前三段一定要与上图所示IP一致：-1，-2"><a href="#3-修改配置本机VMware-Network-Adapter-VMnet8虚拟网络，并且启动网络服务-IP、网关的前三段一定要与上图所示IP一致：-1，-2" class="headerlink" title="3.修改配置本机VMware Network Adapter VMnet8虚拟网络，并且启动网络服务 IP、网关的前三段一定要与上图所示IP一致：#.#.#.1，#.#.#.2"></a>3.修改配置本机VMware Network Adapter VMnet8虚拟网络，并且启动网络服务 IP、网关的前三段一定要与上图所示IP一致：#.#.#.1，#.#.#.2</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702286-58af2a9f-bbc3-4ef7-8e38-4a9f328818fc.png"></p><h3 id="2、新建镜像：centos镜像"><a href="#2、新建镜像：centos镜像" class="headerlink" title="2、新建镜像：centos镜像"></a>2、新建镜像：centos镜像</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702890-ba7aa1c4-3edd-436e-a54b-c614fa36bc7b.png"></p><h3 id="3、修改静态IP"><a href="#3、修改静态IP" class="headerlink" title="3、修改静态IP"></a>3、<strong>修改静态IP</strong></h3><p>#查看修改前的IP</p><p>[roiot@localhost ~]# ip addr</p><p>[root@hadoop100 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><p>#修改</p><p>BOOTPROTO&#x3D;static ip模式 (dhcp或者static)、vion</p><p>ONBOOT&#x3D;yes</p><p>#新增(在dn配置B</p><p>#静态IP(“172” 与你的vmnet8虚拟网络IP保持一致，“200” 在3~255之间取值)</p><p>IPADDR&#x3D;192.168.172.200</p><p>#网关(“1DN72”与你的vmnet8虚拟网络IPsystemctl保持一致，“2”不变)</p><p>GATEWAY&#x3D;192.168.172.2</p><p>#子网掩码</p><p>NETMASK&#x3D;255.255.255.0</p><p>#DNS</p><p>#8.8.8.8是GOOGLE公司提供的DNS，该地址</p><p>是全球通用的</p><p>DNS1&#x3D;8.8.8.8 </p><p>#114.114.114.114是国内移动、电信和联通通用的DNS</p><p>DNS2&#x3D;114.114.114.114</p><p>#重启网络服务</p><p>[root@localhost ~]# <code>systemctl restart network </code></p><p>下面所示异常解决办法：</p><p>Job for network.service failed because the control process exited with error code. See “systemctl status network.service” and “journalctl -xe” for details.</p><p>关闭防火墙：</p><p>systemctl status firewalld #查看防火墙systemctl </p><p>systemctl stop firewalld #关闭防火墙</p><p>systemctl disable firewalld #禁用防火墙</p><p><strong>解决办法:</strong></p><p>系统自带的 NetworkManager 这个管理套件出错，关掉.</p><p>关掉方法:</p><p>**systemctl stop NetworkManavi **</p><p><strong>systemctl disable NetworkManapingger</strong></p><p>重新启动网络：</p><p>systemctl stop NetworkManavi </p><p>#查看修改后的IP</p><p>[root@localhost ~]# ip addr</p><p>#查看网路</p><p>[root@localhost ~]# ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p>网络配置都正确，仍ping不同，尝试更换IPADDR值</p><p><strong>Linux基础</strong></p><p><a href="https://blog.csdn.net/qq_19843217/article/details/131142907">https://blog.csdn.net/qq_19843217&#x2F;article&#x2F;details&#x2F;131142907</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日python作业</title>
      <link href="/2024/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>] * <span class="number">110</span></span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    arr[i] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> arr[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>出现<span class="subst">&#123;arr[i]&#125;</span>次&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">ans1 = <span class="number">0</span></span><br><span class="line">ans2 = <span class="number">0</span></span><br><span class="line">stand = <span class="built_in">sum</span>/<span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> i &gt; stand:</span><br><span class="line">        ans1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; stand:</span><br><span class="line">        ans2 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bigger:&quot;</span>+<span class="built_in">str</span>(ans1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;smaller:&quot;</span>+<span class="built_in">str</span>(ans2))</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">lst</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> lst:</span><br><span class="line">        i = random.randrange(<span class="built_in">len</span>(lst))</span><br><span class="line">        result.append(lst.pop(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入数字列表，以空格分隔：&quot;</span>)</span><br><span class="line">lst = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> s.split()]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;洗牌后的数字列表：&quot;</span>, shuffle(lst))</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">list</span> = [a,b,c]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter an integer:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">and</span> a % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 and 6? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 and 6? False&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> a % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6? False&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> a % <span class="number">6</span> == <span class="number">0</span>) <span class="keyword">and</span> <span class="keyword">not</span> (a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">and</span> a % <span class="number">6</span> == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6, but not both? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6, but not both? False&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lottery = random.randint(<span class="number">100</span>, <span class="number">999</span>)</span><br><span class="line">user_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个三位数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user_num == lottery:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$10,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lot_digits = [lottery // <span class="number">100</span>, (lottery // <span class="number">10</span>) % <span class="number">10</span>, lottery % <span class="number">10</span>]</span><br><span class="line">    user_digits = [user_num // <span class="number">100</span>, (user_num // <span class="number">10</span>) % <span class="number">10</span>, user_num % <span class="number">10</span>]</span><br><span class="line">    same = [d <span class="keyword">for</span> d <span class="keyword">in</span> user_digits <span class="keyword">if</span> d <span class="keyword">in</span> lot_digits]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(same) == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$3,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        match_count = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> user_digits <span class="keyword">if</span> d <span class="keyword">in</span> lot_digits)</span><br><span class="line">        <span class="keyword">if</span> match_count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$1,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;很遗憾，你没有中奖。彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_hex</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> value &lt; <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;十六进制是：&quot;</span>+<span class="built_in">str</span>(value))</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">10</span> &lt;= value &lt;= <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;十六进制是：&quot;</span>+<span class="built_in">str</span>((<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + value - <span class="number">10</span>))))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无效输入，请输入一个整数。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">to_hex()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>():</span><br><span class="line">    user_choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;剪刀（0）、石头（1）、布（2）：&quot;</span>))</span><br><span class="line">    computer_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> user_choice == computer_choice:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局。&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (user_choice == <span class="number">0</span> <span class="keyword">and</span> computer_choice == <span class="number">1</span>) <span class="keyword">or</span> \</span><br><span class="line">            (user_choice == <span class="number">1</span> <span class="keyword">and</span> computer_choice == <span class="number">2</span>) <span class="keyword">or</span> \</span><br><span class="line">            (user_choice == <span class="number">2</span> <span class="keyword">and</span> computer_choice == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你赢了。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你输了。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">game()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
