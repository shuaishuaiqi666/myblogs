<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker的常用命令</title>
      <link href="/2024/10/22/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/10/22/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>docker version # 显示docker的版本信息</p><p>docker info # 显示docker的系统信息，包括镜像和容器的数量</p><p>docker 命令 –help # 帮助命令</p><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><p>docker pull：用于从远程仓库拉取镜像到本地。</p><p>docker images：查看本地已有的镜像列表。</p><p>docker run：基于镜像创建并启动一个容器。</p><p>docker ps：查看正在运行的容器列表。</p><p>docker stop：停止一个正在运行的容器。</p><p>docker rm：删除一个已停止的容器。</p><p>docker rmi :删除一个镜像</p><p>docker history <image_name> :查看镜像详细信息</p><p><font style="color:rgb(24, 24, 24);">systemctl start docker #启动docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl stop docker #关闭docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl restart docker #重启docker </font></p><p><font style="color:rgb(24, 24, 24);">systemctl enable docker #设置开机自启动 </font></p><p><font style="color:rgb(24, 24, 24);">systemctl status docker #查看docker运行状态 </font></p><h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729528712963-25712f09-37e8-487d-be17-23db484109e1.png"></p><h3 id="docker-images-查看镜像"><a href="#docker-images-查看镜像" class="headerlink" title="docker images 查看镜像"></a>docker images 查看镜像</h3><p>[root@localhost &#x2F;]# docker images</p><p>:::tips<br>REPOSITORY    TAG        IMAGE ID               CREATED         SIZE</p><p>hello-world     latest      bf756fb1ae65 5     months ago    13.3kB</p><p>:::</p><p>#解释</p><p><strong>REPOSITORY</strong> 镜像的仓库源</p><p><strong>TAG</strong> 镜像标签</p><p><strong>IMAGE ID</strong> 镜像id</p><p><strong>CREATED</strong> 镜像的创建时间</p><p><strong>SIZE</strong> 镜像的大小</p><p>#可选项</p><p>Options:</p><p>-a, –all # 列出所有镜像</p><p>-q, –quiet # 只显示镜像id</p><h3 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a>docker search 搜索镜像</h3><p>[root@localhost &#x2F;]# docker search mysql</p><p>NAME                 DESCRIPTION                                           STARS                  OFFICIAL AUTOMATED</p><p>mysql                  MySQL is a widely used, open-source relation… 9604                                 [OK] </p><p>mariadb                   MariaDB is a community-developed fork of MyS… 3490                             [OK] </p><p>#解释</p><p><strong>NAME</strong> 镜像名称</p><p><strong>DESCRIPTION</strong> 镜像描述</p><p><strong>STARS</strong> 镜像的评分</p><p><strong>OFFICIAL</strong> 是否为官方镜像</p><p><strong>AUTOMATED</strong> 是否为自动构建镜像<br>#可选项，通过收藏来过滤</p><p>–filter&#x3D;STARS&#x3D;3000 #搜索出来的镜像就是STARS大于3000的</p><p>[root@localhost &#x2F;]# docker search mysql –filter&#x3D;STARS&#x3D;3000</p><p>NAME DESCRIPTION STARS OFFICIAL AUTOMATED</p><p>mysql MySQL is a widely used, open-source relation… 9604 [OK] </p><p>mariadb MariaDB is a community-developed fork of MyS… 3490 [OK] </p><h3 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h3><p>#下载镜像 docker pull 镜像名[:tag]</p><p>[root@localhost &#x2F;]# docker pull mysql</p><p>Using default tag: latest # 如果不写 tag,默认就是latest</p><p>docker pull mysql 等价于: docker pull docker.io&#x2F;library&#x2F;mysql:latest</p><p>#指定版本下载</p><p>[root@localhost &#x2F;]# docker pull mysql:5.7</p><h3 id="Docker构建"><a href="#Docker构建" class="headerlink" title="Docker构建"></a>Docker构建</h3><p>要构建自己的Docker镜像，可以使用以下命令：</p><p>docker build [OPTIONS] PATH | URL | -</p><p>docker build：构建镜像的命令。</p><p>[OPTIONS]：可选参数，用于配置构建过程，如镜像标签、构建上下文路径等。</p><p>PATH | URL | -：Dockerfile所在的路径、URL或者使用标准输入作为Dockerfile。</p><h3 id="docker-push-推送镜像"><a href="#docker-push-推送镜像" class="headerlink" title="docker push 推送镜像"></a>docker push 推送镜像</h3><p>要将本地的镜像推送到Docker仓库，可以使用以下命令：</p><p>docker push [OPTIONS] NAME[:TAG]</p><p>docker push：推送镜像的命令。</p><p>[OPTIONS]：可选参数，用于配置推送过程，如认证信息等。</p><p>NAME[:TAG]：要推送的镜像名称和标签。</p><h3 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi 删除镜像"></a>docker rmi 删除镜像</h3><p>[root@localhost &#x2F;]# docker rmi -f 镜像id #删除指定镜像</p><p>[root@localhost &#x2F;]# docker rmi -f 镜像id 镜像id 镜像id #删除多个镜像</p><p>[root@localhost &#x2F;]# docker rmi -f $(docker images -aq) #删除全部镜像</p><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729529353219-c48bf38b-4a0c-499c-ae47-08aaefcd9154.png"></p><p>容器保护三个状态：</p><ul><li><p>运行：进程正常运行&lt;&#x2F;&gt;</p></li><li><p>暂停：进程暂停，CPU不再运行，并不释放内存</p></li><li><p>停止：进程终止，回收进程占用的内存、CPU等资源</p></li><li><p>其中：</p></li><li><p>docker run：创建并运行一个容器，处于运行状态</p></li><li><p>docker pause name：让一个运行的容器暂停</p></li><li><p>docker unpause name：让一个容器从暂停状态恢复运行</p></li><li><p>docker stop name：停止一个运行的容器（杀死进程、回收内存，仅剩</font><font style="color:rgb(0, 82, 217);">文件系统</font>）</font></p></li><li><p>docker start name：让一个停止的容器再次运行</font></p></li><li><p>docker restart name：重启容器</font></p></li><li><p>docker rm：删除一个容器（进程、内存回收、文件系统彻底干掉）</font></p></li></ul></font><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><p>docker run [可选参数] image</font></p><p>#参数说明</font></p><p>–name&#x3D;”Name” 容器名字 tomcat01 tomcat02 ，用来区分容器</font></p><p>-d 后台方式运行</font></p><p>-it 使用交互方式运行，进入容器查看内容</font></p><p>-p 指定容器的端口 -p8080:80</font></p><p>-p ip:主机(即宿主机)端口：容器端口</font></p><p>-p 主机端口：容器端口 #这种方式常用</font></p><p>-p 容器端口</font></p><p>容器端口P</font></p><p>-P 随机指定端口(大写P)</font></p></font><h3 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h3><p>#docker ps 命令</font></p><p>(不加） # 列出当前正在运行的容器</font></p><p>-a # 列出当前正在运行的容器 + 带出历史运行过的容器</font></p><p>-n&#x3D;? # 显示最近创建的容器</font></p><p>-q # 只显示当前容器的编号</font></p></font><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>exit # 直接退出容器</font></p><p>Ctrl + p + q # 容器不停止退出</font></p></font><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>docker rm 容器id # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</font></p><p>docker rm-f$(docker ps -aq) # 删除所有容器 </font></p><p>docker ps-a-q|xargs docker rm # 删除所有容器</font></p></font><h3 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h3><p>docker start 容器id # 启动容器</font></p><p>docker restart 容器id # 重启容器</font></p><p>docker stop 容器id # 停止当前正在运行的容器</font></p><p>docker kill 容器id # 强制停止当前正在运行的容器</font></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ddddocr的安装和基础使用</title>
      <link href="/2024/10/18/ddddocr/"/>
      <url>/2024/10/18/ddddocr/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><font style="color:rgb(77, 77, 77);">ddddocr</font><del><font style="color:rgb(77, 77, 77);">名字真奇怪</font></del><font style="color:rgb(77, 77, 77);">是一款强大的</font><font style="color:rgb(5, 7, 59);background-color:rgb(253, 253, 254);">基于深度学习的</font><font style="color:rgb(77, 77, 77);">通用开源ocr识别库，具有高效、准确、易用的特点，广泛应用于图像处理和文字识别任务。</font></p><p><font style="color:rgb(77, 77, 77);"></font></p><p><font style="color:rgb(77, 77, 77);">常见用处：</font><del><font style="color:rgb(77, 77, 77);">在爬虫时候 </font></del><font style="color:rgb(77, 77, 77);">识别验证码</font></p><p><font style="color:rgb(77, 77, 77);"></font></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><font style="color:rgb(77, 77, 77);">安装</font></h1><p>非常easy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr</span><br></pre></td></tr></table></figure><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">ocr = ddddocr.DdddOcr(show_ad=<span class="literal">False</span>)  <span class="comment"># show\_ad=False关闭广告</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./img/img_1.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    im = f1.read()</span><br><span class="line">    yzm1 = ocr.classification(im)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./img/img_2.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    im = f2.read()</span><br><span class="line">    yzm2 = ocr.classification(im)</span><br><span class="line"><span class="built_in">print</span>(yzm1, yzm2)</span><br></pre></td></tr></table></figure><h2 id="函数解释"><a href="#函数解释" class="headerlink" title="函数解释"></a>函数解释</h2><p>当然，以下是对<code>ddddocr</code>库中<code>DdddOcr</code>类及其<code>classification</code>方法的解释，以及如何在上述代码中使用的详细说明：</p><h3 id="DdddOcr-类"><a href="#DdddOcr-类" class="headerlink" title="DdddOcr 类"></a><code>DdddOcr</code> 类</h3><p><code>DdddOcr</code> 是 <code>ddddocr</code> 库中的一个类，用于执行OCR（光学字符识别）任务，特别是针对验证码等复杂字符的识别。</p><h4 id="初始化方法（构造函数）"><a href="#初始化方法（构造函数）" class="headerlink" title="初始化方法（构造函数）"></a>初始化方法（构造函数）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ocr = ddddocr.DdddOcr(show_ad=<span class="literal">False</span>, det=<span class="literal">True</span>, ocr=<span class="literal">True</span>, cls=<span class="literal">True</span>, gpu=<span class="literal">False</span>, path_det_model=<span class="literal">None</span>, path_ocr_model=<span class="literal">None</span>, path_cls_model=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>show_ad</code>：布尔值，是否显示广告。在上述代码中，设置为 <code>False</code> 以关闭广告。</li><li><code>det</code>：布尔值，是否启用检测模型（用于定位图片中的文本区域）。通常，对于验证码识别，这个选项是启用的。</li><li><code>ocr</code>：布尔值，是否启用OCR模型（用于识别检测到的文本）。</li><li><code>cls</code>：布尔值，是否启用分类模型（用于进一步处理OCR结果，例如将数字识别为特定的验证码字符集）。</li><li><code>gpu</code>：布尔值，是否使用GPU进行加速。如果系统中有可用的GPU和相应的CUDA支持，可以设置为 <code>True</code>。</li><li><code>path_det_model</code>, <code>path_ocr_model</code>, <code>path_cls_model</code>：字符串，分别指定检测、OCR和分类模型的路径。如果未指定，将使用默认的预训练模型。</li></ul><h4 id="classification-方法"><a href="#classification-方法" class="headerlink" title="classification 方法"></a><code>classification</code> 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = ocr.classification(image, det=<span class="literal">True</span>, cls=<span class="literal">True</span>, box_limit=<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><ul><li><code>image</code>：要识别的图片，通常是一个二进制数据或经过预处理的图像数组。</li><li><code>det</code>：布尔值，是否启用检测模型。对于验证码识别，通常保持为 <code>True</code>。</li><li><code>cls</code>：布尔值，是否启用分类模型。对于验证码识别，通常也保持为 <code>True</code>。</li><li><code>box_limit</code>：整数，限制检测到的文本区域的数量。对于验证码，这个值通常不需要调整，因为验证码通常只包含一个文本区域。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><code>classification</code> 方法返回一个字符串或字符串列表，表示识别到的字符。对于验证码，通常期望返回一个字符串，因为验证码通常是一个单词或一串连续的字符。</p><h3 id="在代码中的使用"><a href="#在代码中的使用" class="headerlink" title="在代码中的使用"></a>在代码中的使用</h3><p>在上述代码中，<code>DdddOcr</code> 类被实例化，并且 <code>classification</code> 方法被用来识别两张图片中的验证码。</p><ol><li>实例化 <code>DdddOcr</code> 类，关闭广告显示。</li><li>使用 <code>with open</code> 语句打开每张图片文件，并读取其二进制内容。</li><li>调用 <code>classification</code> 方法，传入图片数据，进行验证码识别。</li><li>打印识别结果。</li></ol><p>这个过程对于两张图片是重复的，只是文件路径和存储识别结果的变量名不同。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集基础</title>
      <link href="/2024/10/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2024/10/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p><font style="color:rgb(77, 77, 77);">并查集的</font><font style="color:#DF2A3F;">逻辑结构</font><font style="color:rgb(77, 77, 77);">是一个包含N个元素的</font><strong><font style="color:rgb(77, 77, 77);">集合</font></strong><font style="color:rgb(77, 77, 77);">，如图：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724927702922-6195891c-a3ad-4456-89d3-8d5135ca654b.png"></p><p><font style="color:rgb(77, 77, 77);">并查集的</font><font style="color:#DF2A3F;">存储结构</font><font style="color:rgb(77, 77, 77);">是一个包含N个元素的</font><strong><font style="color:rgb(77, 77, 77);">树</font></strong><font style="color:rgb(77, 77, 77);">，如图：</font></p><p><font style="color:rgb(77, 77, 77);">用一个数组存储p[x]来存储每个元素（点）的父节点</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724928055679-6627571b-46c4-45cf-b673-45b115b0a24d.png"></p><h1 id="讲解知识点"><a href="#讲解知识点" class="headerlink" title="讲解知识点"></a>讲解知识点</h1><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h5><p>每个集合的根节点便是这个集合的编号，每个点存储自己的父节点(初始化)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    p[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树根：p[x]&#x3D;&#x3D;x          &#x2F;&#x2F;(父节点等于自己)</p><p>求集合编号：while(p[x]!&#x3D;x) x&#x3D;p[x]      &#x2F;&#x2F;(不是根节点的话，置换成父节点进行再次判断)</p><h5 id="路径压缩优化"><a href="#路径压缩优化" class="headerlink" title="路径压缩优化"></a>路径压缩优化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//找根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]!=x)<span class="comment">//父节点等于自己的是根节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p[x] = <span class="built_in">find</span>(p[x]);<span class="comment">//递归到根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1724932291514-7a8c2934-b1a1-4b1e-9581-2cdf11eb508d.png"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="并查集的两种基本操作"><a href="#并查集的两种基本操作" class="headerlink" title="并查集的两种基本操作"></a><strong>并查集的两种基本操作</strong></h5><h6 id="1-将两个集合合并"><a href="#1-将两个集合合并" class="headerlink" title="1.将两个集合合并"></a><strong>1.将两个集合合并</strong></h6><p><code>p[find(a)] = find(b)</code></p><hr><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/35262955/1724927734784-c848861f-72ea-444c-810a-276b6c719d72.gif"></p><hr><h6 id="2-询问两个集合是否在同一集合"><a href="#2-询问两个集合是否在同一集合" class="headerlink" title="2.询问两个集合是否在同一集合"></a><strong>2.询问两个集合是否在同一集合</strong></h6><p><code>if (find(a) == find(b))</code></p><hr><hr><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://www.luogu.com.cn/problem/P3367">https://www.luogu.com.cn/problem/P3367</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//找根节点函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">&#123;</span><br><span class="line">p[x]=<span class="built_in">find</span>(p[x]);<span class="comment">//递归去找根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="comment">//初始化 ，是每个元素是一个集合 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z,x,y;</span><br><span class="line">cin&gt;&gt;z&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);<span class="comment">//合并集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))<span class="comment">//判断是否属于同一集合</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Y&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;N&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机环境安装配置(centos7)</title>
      <link href="/2024/10/16/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(centos7)/"/>
      <url>/2024/10/16/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(centos7)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1、查看VMware服务"><a href="#1、查看VMware服务" class="headerlink" title="1、查看VMware服务"></a>1、查看VMware服务</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702196-4375d419-554e-40a8-bb2e-434a3e31669b.png"></p><h2 id="2-查看vmware-网络设置，选择VMnet8，"><a href="#2-查看vmware-网络设置，选择VMnet8，" class="headerlink" title="2.查看vmware 网络设置，选择VMnet8，"></a>2.查看vmware 网络设置，选择VMnet8，</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/bmp/35262955/1729056702153-bace192f-ec88-4bfc-8791-952af27c1f0e.bmp"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35262955/1729056702035-9b7729d1-4c13-4a39-84e2-01c0aa47f11c.jpeg"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35262955/1729056702053-d025d7cc-75ab-4730-baba-59005eddf56d.jpeg"></p><h2 id="3-修改配置本机VMware-Network-Adapter-VMnet8虚拟网络，并且启动网络服务-IP、网关的前三段一定要与上图所示IP一致：-1，-2"><a href="#3-修改配置本机VMware-Network-Adapter-VMnet8虚拟网络，并且启动网络服务-IP、网关的前三段一定要与上图所示IP一致：-1，-2" class="headerlink" title="3.修改配置本机VMware Network Adapter VMnet8虚拟网络，并且启动网络服务 IP、网关的前三段一定要与上图所示IP一致：#.#.#.1，#.#.#.2"></a>3.修改配置本机VMware Network Adapter VMnet8虚拟网络，并且启动网络服务 IP、网关的前三段一定要与上图所示IP一致：#.#.#.1，#.#.#.2</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702286-58af2a9f-bbc3-4ef7-8e38-4a9f328818fc.png"></p><h3 id="2、新建镜像：centos镜像"><a href="#2、新建镜像：centos镜像" class="headerlink" title="2、新建镜像：centos镜像"></a>2、新建镜像：centos镜像</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35262955/1729056702890-ba7aa1c4-3edd-436e-a54b-c614fa36bc7b.png"></p><h3 id="3、修改静态IP"><a href="#3、修改静态IP" class="headerlink" title="3、修改静态IP"></a>3、<strong>修改静态IP</strong></h3><p>#查看修改前的IP</p><p>[roiot@localhost ~]# ip addr</p><p>[root@hadoop100 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><p>#修改</p><p>BOOTPROTO&#x3D;static ip模式 (dhcp或者static)、vion</p><p>ONBOOT&#x3D;yes</p><p>#新增(在dn配置B</p><p>#静态IP(“172” 与你的vmnet8虚拟网络IP保持一致，“200” 在3~255之间取值)</p><p>IPADDR&#x3D;192.168.172.200</p><p>#网关(“1DN72”与你的vmnet8虚拟网络IPsystemctl保持一致，“2”不变)</p><p>GATEWAY&#x3D;192.168.172.2</p><p>#子网掩码</p><p>NETMASK&#x3D;255.255.255.0</p><p>#DNS</p><p>#8.8.8.8是GOOGLE公司提供的DNS，该地址</p><p>是全球通用的</p><p>DNS1&#x3D;8.8.8.8 </p><p>#114.114.114.114是国内移动、电信和联通通用的DNS</p><p>DNS2&#x3D;114.114.114.114</p><p>#重启网络服务</p><p>[root@localhost ~]# <code>systemctl restart network </code></p><p>下面所示异常解决办法：</p><p>Job for network.service failed because the control process exited with error code. See “systemctl status network.service” and “journalctl -xe” for details.</p><p>关闭防火墙：</p><p>systemctl status firewalld #查看防火墙systemctl </p><p>systemctl stop firewalld #关闭防火墙</p><p>systemctl disable firewalld #禁用防火墙</p><p><strong>解决办法:</strong></p><p>系统自带的 NetworkManager 这个管理套件出错，关掉.</p><p>关掉方法:</p><p>**systemctl stop NetworkManavi **</p><p><strong>systemctl disable NetworkManapingger</strong></p><p>重新启动网络：</p><p>systemctl stop NetworkManavi </p><p>#查看修改后的IP</p><p>[root@localhost ~]# ip addr</p><p>#查看网路</p><p>[root@localhost ~]# ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p>网络配置都正确，仍ping不同，尝试更换IPADDR值</p><p><strong>Linux基础</strong></p><p><a href="https://blog.csdn.net/qq_19843217/article/details/131142907">https://blog.csdn.net/qq_19843217&#x2F;article&#x2F;details&#x2F;131142907</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日python作业</title>
      <link href="/2024/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>] * <span class="number">110</span></span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    arr[i] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> arr[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>出现<span class="subst">&#123;arr[i]&#125;</span>次&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">ans1 = <span class="number">0</span></span><br><span class="line">ans2 = <span class="number">0</span></span><br><span class="line">stand = <span class="built_in">sum</span>/<span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> i &gt; stand:</span><br><span class="line">        ans1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; stand:</span><br><span class="line">        ans2 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bigger:&quot;</span>+<span class="built_in">str</span>(ans1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;smaller:&quot;</span>+<span class="built_in">str</span>(ans2))</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">lst</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> lst:</span><br><span class="line">        i = random.randrange(<span class="built_in">len</span>(lst))</span><br><span class="line">        result.append(lst.pop(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入数字列表，以空格分隔：&quot;</span>)</span><br><span class="line">lst = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> s.split()]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;洗牌后的数字列表：&quot;</span>, shuffle(lst))</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">list</span> = [a,b,c]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter an integer:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">and</span> a % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 and 6? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 and 6? False&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> a % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6? False&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> a % <span class="number">6</span> == <span class="number">0</span>) <span class="keyword">and</span> <span class="keyword">not</span> (a % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">and</span> a % <span class="number">6</span> == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6, but not both? True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Is 10 divisible by 5 or 6, but not both? False&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lottery = random.randint(<span class="number">100</span>, <span class="number">999</span>)</span><br><span class="line">user_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个三位数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user_num == lottery:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$10,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lot_digits = [lottery // <span class="number">100</span>, (lottery // <span class="number">10</span>) % <span class="number">10</span>, lottery % <span class="number">10</span>]</span><br><span class="line">    user_digits = [user_num // <span class="number">100</span>, (user_num // <span class="number">10</span>) % <span class="number">10</span>, user_num % <span class="number">10</span>]</span><br><span class="line">    same = [d <span class="keyword">for</span> d <span class="keyword">in</span> user_digits <span class="keyword">if</span> d <span class="keyword">in</span> lot_digits]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(same) == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$3,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        match_count = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> user_digits <span class="keyword">if</span> d <span class="keyword">in</span> lot_digits)</span><br><span class="line">        <span class="keyword">if</span> match_count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;恭喜你，你中了$1,000，彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;很遗憾，你没有中奖。彩票号码是<span class="subst">&#123;lottery&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_hex</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> value &lt; <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;十六进制是：&quot;</span>+<span class="built_in">str</span>(value))</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">10</span> &lt;= value &lt;= <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;十六进制是：&quot;</span>+<span class="built_in">str</span>((<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + value - <span class="number">10</span>))))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无效输入，请输入一个整数。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">to_hex()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>():</span><br><span class="line">    user_choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;剪刀（0）、石头（1）、布（2）：&quot;</span>))</span><br><span class="line">    computer_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> user_choice == computer_choice:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局。&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (user_choice == <span class="number">0</span> <span class="keyword">and</span> computer_choice == <span class="number">1</span>) <span class="keyword">or</span> \</span><br><span class="line">            (user_choice == <span class="number">1</span> <span class="keyword">and</span> computer_choice == <span class="number">2</span>) <span class="keyword">or</span> \</span><br><span class="line">            (user_choice == <span class="number">2</span> <span class="keyword">and</span> computer_choice == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你赢了。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你输了。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">game()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
